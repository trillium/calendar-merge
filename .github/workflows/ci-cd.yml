name: CI/CD Pipeline

on:
  push:
    branches: ["**"]
  pull_request:
    branches: [main]
  workflow_dispatch:

env:
  NODE_VERSION: "20"
  PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
  REGION: ${{ secrets.GCP_REGION }}
  SERVICE_ACCOUNT_EMAIL: ${{ secrets.GCP_SERVICE_ACCOUNT_EMAIL }}

jobs:
  # Detect what changed
  changes:
    name: Detect Changes
    runs-on: ubuntu-latest
    outputs:
      backend: ${{ steps.filter.outputs.backend }}
      frontend: ${{ steps.filter.outputs.frontend }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Check for file changes
        uses: dorny/paths-filter@v3
        id: filter
        with:
          filters: |
            backend:
              - 'functions/**'
              - 'package.json'
              - 'pnpm-lock.yaml'
            frontend:
              - 'web/**'

  # Run tests on backend changes
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    needs: changes
    if: needs.changes.outputs.backend == 'true'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 10

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "pnpm"

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Run tests
        run: pnpm test

      - name: Build
        run: pnpm build

  # Deploy to GCP only on main branch after tests pass and if backend changed
  deploy:
    name: Deploy to GCP
    runs-on: ubuntu-latest
    needs: [changes, test]
    if: |
      github.ref == 'refs/heads/main' &&
      github.event_name == 'push' &&
      needs.changes.outputs.backend == 'true'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 10

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "pnpm"

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Build functions
        run: pnpm build

      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v2
        with:
          project_id: ${{ env.PROJECT_ID }}

      - name: Deploy handleWebhook function
        run: |
          gcloud functions deploy handleWebhook \
            --gen2 \
            --runtime=nodejs20 \
            --region=${{ env.REGION }} \
            --source=./functions/calendar-sync \
            --entry-point=handleWebhook \
            --trigger-http \
            --allow-unauthenticated \
            --service-account=${{ env.SERVICE_ACCOUNT_EMAIL }} \
            --set-env-vars PROJECT_ID=${{ env.PROJECT_ID }},GOOGLE_CLIENT_ID=${{ secrets.GOOGLE_CLIENT_ID }},GOOGLE_CLIENT_SECRET=${{ secrets.GOOGLE_CLIENT_SECRET }}

      - name: Deploy renewWatches function
        run: |
          gcloud functions deploy renewWatches \
            --gen2 \
            --runtime=nodejs20 \
            --region=${{ env.REGION }} \
            --source=./functions/calendar-sync \
            --entry-point=renewWatches \
            --trigger-http \
            --allow-unauthenticated \
            --service-account=${{ env.SERVICE_ACCOUNT_EMAIL }} \
            --set-env-vars PROJECT_ID=${{ env.PROJECT_ID }},GOOGLE_CLIENT_ID=${{ secrets.GOOGLE_CLIENT_ID }},GOOGLE_CLIENT_SECRET=${{ secrets.GOOGLE_CLIENT_SECRET }}

      - name: Deploy api function
        run: |
          gcloud functions deploy api \
            --gen2 \
            --runtime=nodejs20 \
            --region=${{ env.REGION }} \
            --source=./functions/calendar-sync \
            --entry-point=api \
            --trigger-http \
            --allow-unauthenticated \
            --service-account=${{ env.SERVICE_ACCOUNT_EMAIL }} \
            --set-env-vars PROJECT_ID=${{ env.PROJECT_ID }},GOOGLE_CLIENT_ID=${{ secrets.GOOGLE_CLIENT_ID }},GOOGLE_CLIENT_SECRET=${{ secrets.GOOGLE_CLIENT_SECRET }}

      - name: Get function URLs
        id: get-urls
        run: |
          API_URL=$(gcloud functions describe api --region=${{ env.REGION }} --gen2 --format='value(serviceConfig.uri)')
          echo "üåê API Gateway URL: $API_URL"
          echo "api_url=$API_URL" >> $GITHUB_OUTPUT

      - name: Deployment summary
        run: |
          echo "‚úÖ Backend deployment complete!"
          echo "Region: ${{ env.REGION }}"
          echo "Project: ${{ env.PROJECT_ID }}"
          echo "API URL: ${{ steps.get-urls.outputs.api_url }}"
          gcloud functions list --regions=${{ env.REGION }}

  # Deploy frontend only after backend is deployed and if frontend changed
  deploy-frontend:
    name: Deploy Frontend
    runs-on: ubuntu-latest
    needs: [changes, deploy]
    if: |
      github.ref == 'refs/heads/main' &&
      github.event_name == 'push' &&
      (needs.changes.outputs.frontend == 'true' || needs.changes.outputs.backend == 'true')

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install Vercel CLI
        run: npm install -g vercel

      - name: Get API URL from backend deployment
        id: get-api-url
        run: |
          if [ ! -f .env.gcp ]; then
            echo "‚ùå .env.gcp not found"
            exit 1
          fi
          source .env.gcp
          API_URL=$(gcloud functions describe api --region=$REGION --gen2 --format='value(serviceConfig.uri)' 2>/dev/null || echo "")
          if [ -z "$API_URL" ]; then
            echo "‚ùå Could not get API URL"
            exit 1
          fi
          echo "api_url=$API_URL" >> $GITHUB_OUTPUT
          echo "üåê Using API URL: $API_URL"

      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v2
        with:
          project_id: ${{ env.PROJECT_ID }}

      - name: Deploy to Vercel
        working-directory: ./web
        run: |
          echo "üöÄ Deploying frontend to Vercel..."

          # Set environment variable in Vercel
          echo "${{ steps.get-api-url.outputs.api_url }}" | vercel env add VITE_API_URL production --token=${{ secrets.VERCEL_TOKEN }}

          # Deploy to production
          vercel --prod --token=${{ secrets.VERCEL_TOKEN }}

          echo "‚úÖ Frontend deployment complete!"
